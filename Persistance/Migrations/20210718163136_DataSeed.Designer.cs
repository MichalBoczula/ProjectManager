// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance.Context;

namespace Persistance.Migrations
{
    [DbContext(typeof(ProjectManagerDbContext))]
    [Migration("20210718163136_DataSeed")]
    partial class DataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d02cce8c-b217-45c9-9811-addfe93a0d37"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Adam",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Kowalski",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("b5e4bb9a-99f3-4d2a-b7e8-b480edc21aac"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Tomasz",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Nowak",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("29ff9906-d68b-4366-b40a-5672471916a6"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Adam",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Smith",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Paul",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Allen",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 236, DateTimeKind.Unspecified).AddTicks(707), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            Description = "Backend API project in CQRS architecture pattern.",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0,
                            StatusId = 1,
                            Title = "Backend"
                        },
                        new
                        {
                            Id = new Guid("63e28160-9811-435f-b3bd-34649e181c3f"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5726), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            Description = "DB infrastructure create in Code First approach.",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0,
                            StatusId = 1,
                            Title = "Persistance Layer"
                        },
                        new
                        {
                            Id = new Guid("dc4870ae-30ed-4de8-8f12-4175516e6d84"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5857), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            Description = "Create consumer for API in Angular framework.",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0,
                            StatusId = 1,
                            Title = "Frontend"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProjectAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DeadLine")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Done")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Established")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectActions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81e9d377-7a3c-4979-94f8-fb814fda43e0"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(3707), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Make domain classes",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("d02cce8c-b217-45c9-9811-addfe93a0d37"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(3759), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Domain"
                        },
                        new
                        {
                            Id = new Guid("ec3fa388-63fd-4fa8-822d-7fc76e7bf9ac"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4697), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Write Queries and Commands",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("d02cce8c-b217-45c9-9811-addfe93a0d37"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4708), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Application"
                        },
                        new
                        {
                            Id = new Guid("f473e0e6-b21f-4e8d-961e-78e360c15009"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4731), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Write and run unit tests",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("d02cce8c-b217-45c9-9811-addfe93a0d37"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4735), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            Status = 0,
                            StatusId = 1,
                            Title = "UnitTests"
                        },
                        new
                        {
                            Id = new Guid("4089a299-a777-4eb6-82ac-a95b399c539a"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4755), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create API Controllers",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("d02cce8c-b217-45c9-9811-addfe93a0d37"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4758), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            Status = 0,
                            StatusId = 1,
                            Title = "API"
                        },
                        new
                        {
                            Id = new Guid("1e03852f-e94d-4687-8c0e-ae95607ef4a6"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4779), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create and run Integration Tests",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("b5e4bb9a-99f3-4d2a-b7e8-b480edc21aac"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(4782), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Integration Tests"
                        },
                        new
                        {
                            Id = new Guid("2e680500-9fb3-4877-9a2e-b726d58241f4"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5760), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create Db schema",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("b5e4bb9a-99f3-4d2a-b7e8-b480edc21aac"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5763), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("63e28160-9811-435f-b3bd-34649e181c3f"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Schema"
                        },
                        new
                        {
                            Id = new Guid("e8cd99fa-259d-469c-a59e-8fbbeb5770ce"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5783), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create data seed",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("b5e4bb9a-99f3-4d2a-b7e8-b480edc21aac"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5787), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("63e28160-9811-435f-b3bd-34649e181c3f"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Data seed"
                        },
                        new
                        {
                            Id = new Guid("21106bb2-53ff-4f84-abac-b87e0d8f0da7"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5820), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Initial Db with test data",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("b5e4bb9a-99f3-4d2a-b7e8-b480edc21aac"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5824), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("63e28160-9811-435f-b3bd-34649e181c3f"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Initial Migration"
                        },
                        new
                        {
                            Id = new Guid("981d4c09-0eb6-4faf-9e61-4895c3419472"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5878), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Plan UI for application",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("29ff9906-d68b-4366-b40a-5672471916a6"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5881), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("dc4870ae-30ed-4de8-8f12-4175516e6d84"),
                            Status = 0,
                            StatusId = 1,
                            Title = "UI Plan"
                        },
                        new
                        {
                            Id = new Guid("e9382375-c064-4c5f-9d53-822d9a8e59e9"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5904), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create angular components",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("29ff9906-d68b-4366-b40a-5672471916a6"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5907), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("dc4870ae-30ed-4de8-8f12-4175516e6d84"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Create components"
                        },
                        new
                        {
                            Id = new Guid("4b2f2b73-16ab-433e-a4cd-e529fc052a0a"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5951), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Connect Frontent with Backend via API",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("29ff9906-d68b-4366-b40a-5672471916a6"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5955), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("dc4870ae-30ed-4de8-8f12-4175516e6d84"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Conection with API"
                        },
                        new
                        {
                            Id = new Guid("2eff24d2-0345-4517-b506-d293d1127fe2"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5975), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Add css",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("29ff9906-d68b-4366-b40a-5672471916a6"),
                            Established = new DateTimeOffset(new DateTime(2021, 7, 18, 18, 31, 36, 239, DateTimeKind.Unspecified).AddTicks(5979), new TimeSpan(0, 2, 0, 0, 0)),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("dc4870ae-30ed-4de8-8f12-4175516e6d84"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Application style"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProjectEmployeeManager", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "ProjectId", "ManagerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployeeManagers");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("d02cce8c-b217-45c9-9811-addfe93a0d37"),
                            ProjectId = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52")
                        },
                        new
                        {
                            EmployeeId = new Guid("b5e4bb9a-99f3-4d2a-b7e8-b480edc21aac"),
                            ProjectId = new Guid("09288712-3ae5-430c-8142-5f32c48df7a6"),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52")
                        },
                        new
                        {
                            EmployeeId = new Guid("b5e4bb9a-99f3-4d2a-b7e8-b480edc21aac"),
                            ProjectId = new Guid("63e28160-9811-435f-b3bd-34649e181c3f"),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52")
                        },
                        new
                        {
                            EmployeeId = new Guid("29ff9906-d68b-4366-b40a-5672471916a6"),
                            ProjectId = new Guid("dc4870ae-30ed-4de8-8f12-4175516e6d84"),
                            ManagerId = new Guid("c4ed8a87-2104-448e-bcbb-3faf7f20fc52")
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProjectAction", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("ProjectActions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manager", "Manager")
                        .WithMany("ProjectActions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("ProjectActions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.ProjectEmployeeManager", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manager", "Manager")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("ProjectActions");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Manager", b =>
                {
                    b.Navigation("ProjectActions");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectActions");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
