// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance.Context;

namespace Persistance.Migrations
{
    [DbContext(typeof(ProjectManagerDbContext))]
    [Migration("20210724125400_ModifiedProjectActionEntity")]
    partial class ModifiedProjectActionEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c01423b5-9980-4210-92df-3a2fcbf5b664"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "AdamKowalski@email.com",
                            FirstName = "Adam",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Kowalski",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("9ce70e45-55f3-4d53-af03-e1b24c97339b"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "TomaszNowak@email.com",
                            FirstName = "Tomasz",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Nowak",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("7c2cc216-d5cc-4062-97ca-e326e590e9f9"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "JohnSmith@email.com",
                            FirstName = "John",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Smith",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "PaulAllen@email.com",
                            FirstName = "Paul",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Allen",
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 700, DateTimeKind.Unspecified).AddTicks(3429), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            Description = "Backend API project in CQRS architecture pattern.",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0,
                            StatusId = 1,
                            Title = "Backend"
                        },
                        new
                        {
                            Id = new Guid("64652d35-1df7-4331-80ef-aef7d620e046"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(7931), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            Description = "DB infrastructure create in Code First approach.",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0,
                            StatusId = 1,
                            Title = "Persistance Layer"
                        },
                        new
                        {
                            Id = new Guid("7febeceb-6e20-4151-871b-d5324c0f735b"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(8048), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            Description = "Create consumer for API in Angular framework.",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0,
                            StatusId = 1,
                            Title = "Frontend"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProjectAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DeadLine")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Done")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Inactivated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectActions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21b21a7e-402f-4fa0-850f-0a22f48193dd"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(5868), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Make domain classes",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("c01423b5-9980-4210-92df-3a2fcbf5b664"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Domain"
                        },
                        new
                        {
                            Id = new Guid("4e400504-b528-4bf9-b35c-96e11b95bbc4"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(6778), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Write Queries and Commands",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("c01423b5-9980-4210-92df-3a2fcbf5b664"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Application"
                        },
                        new
                        {
                            Id = new Guid("29ad2d1f-a00d-4d50-b2c7-f017d9c4dea7"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(6856), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Write and run unit tests",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("c01423b5-9980-4210-92df-3a2fcbf5b664"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            Status = 0,
                            StatusId = 1,
                            Title = "UnitTests"
                        },
                        new
                        {
                            Id = new Guid("e754f353-71b9-46eb-a200-31c1c40a9a06"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(6880), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create API Controllers",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("c01423b5-9980-4210-92df-3a2fcbf5b664"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            Status = 0,
                            StatusId = 1,
                            Title = "API"
                        },
                        new
                        {
                            Id = new Guid("d5ff1ff8-3aef-49bc-ba6f-71e1ffa522fc"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(6904), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create and run Integration Tests",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("9ce70e45-55f3-4d53-af03-e1b24c97339b"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Integration Tests"
                        },
                        new
                        {
                            Id = new Guid("c3187017-7ad9-43f9-80f4-33b850cb65a8"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(7966), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create Db schema",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("9ce70e45-55f3-4d53-af03-e1b24c97339b"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("64652d35-1df7-4331-80ef-aef7d620e046"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Schema"
                        },
                        new
                        {
                            Id = new Guid("74a3edf9-ef35-4b57-9f2f-690e0366d1b3"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(7990), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create data seed",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("9ce70e45-55f3-4d53-af03-e1b24c97339b"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("64652d35-1df7-4331-80ef-aef7d620e046"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Data seed"
                        },
                        new
                        {
                            Id = new Guid("3c847971-a0d6-4302-938c-63cc66885e01"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(8012), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Initial Db with test data",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("9ce70e45-55f3-4d53-af03-e1b24c97339b"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("64652d35-1df7-4331-80ef-aef7d620e046"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Initial Migration"
                        },
                        new
                        {
                            Id = new Guid("e462b281-6f24-4846-8f01-8311824acaa6"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(8069), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Plan UI for application",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("7c2cc216-d5cc-4062-97ca-e326e590e9f9"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("7febeceb-6e20-4151-871b-d5324c0f735b"),
                            Status = 0,
                            StatusId = 1,
                            Title = "UI Plan"
                        },
                        new
                        {
                            Id = new Guid("57862264-6fd8-40af-8a82-27097afc1721"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(8097), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create angular components",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("7c2cc216-d5cc-4062-97ca-e326e590e9f9"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("7febeceb-6e20-4151-871b-d5324c0f735b"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Create components"
                        },
                        new
                        {
                            Id = new Guid("6340150a-5a55-4eaa-b3cc-6c98e69da8d1"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(8143), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Connect Frontent with Backend via API",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("7c2cc216-d5cc-4062-97ca-e326e590e9f9"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("7febeceb-6e20-4151-871b-d5324c0f735b"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Conection with API"
                        },
                        new
                        {
                            Id = new Guid("2bc44ff9-69d0-45fc-ad24-1b8673105c8e"),
                            Created = new DateTimeOffset(new DateTime(2021, 7, 24, 14, 53, 59, 703, DateTimeKind.Unspecified).AddTicks(8192), new TimeSpan(0, 2, 0, 0, 0)),
                            CreatedBy = "Admin",
                            DeadLine = new DateTimeOffset(new DateTime(1, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Add css",
                            Done = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EmployeeId = new Guid("7c2cc216-d5cc-4062-97ca-e326e590e9f9"),
                            Feedback = "",
                            Inactivated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787"),
                            Modified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("7febeceb-6e20-4151-871b-d5324c0f735b"),
                            Status = 0,
                            StatusId = 1,
                            Title = "Application style"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProjectEmployeeManager", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "ProjectId", "ManagerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployeeManagers");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("c01423b5-9980-4210-92df-3a2fcbf5b664"),
                            ProjectId = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787")
                        },
                        new
                        {
                            EmployeeId = new Guid("9ce70e45-55f3-4d53-af03-e1b24c97339b"),
                            ProjectId = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787")
                        },
                        new
                        {
                            EmployeeId = new Guid("9ce70e45-55f3-4d53-af03-e1b24c97339b"),
                            ProjectId = new Guid("64652d35-1df7-4331-80ef-aef7d620e046"),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787")
                        },
                        new
                        {
                            EmployeeId = new Guid("7c2cc216-d5cc-4062-97ca-e326e590e9f9"),
                            ProjectId = new Guid("7febeceb-6e20-4151-871b-d5324c0f735b"),
                            ManagerId = new Guid("b517ef40-f882-48cf-8649-cbca908e0787")
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProjectAction", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("ProjectActions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manager", "Manager")
                        .WithMany("ProjectActions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("ProjectActions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.ProjectEmployeeManager", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manager", "Manager")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Manager");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("ProjectActions");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Manager", b =>
                {
                    b.Navigation("ProjectActions");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectActions");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
